{"version":3,"file":"autosaver.min.js","sources":["../src/autosaver.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/autosaver\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport { call } from 'core/ajax';\nimport { create } from 'core/modal_factory';\nimport { get_string as getString } from 'core/str';\nimport { save, cancel, hidden } from 'core/modal_events';\nimport user from 'tiny_cursive/user';\n\nexport const register = (editor, interval) => {\n\n    var is_student, intervention, quizSubmit, assignSubmit;\n\n    quizSubmit = document.querySelector('#responseform');\n    assignSubmit = document.querySelector('#id_submitbutton');\n\n    var bodyElement = document.querySelector('#body');\n    if (bodyElement) {\n        is_student = !bodyElement.classList.contains('teacher_admin'); // true or false\n        intervention = bodyElement.classList.contains('intervention'); // true or false\n    } else {\n        console.error('#body element not found');\n    }\n\n\n    var userid = null;\n    var host = null;\n    var courseid = null;\n    var filename = \"\";\n    var ed = \"\";\n    var event = \"\";\n    var recourceId = 0;\n    var modulename = \"\";\n    var editorid = editor?.id;\n    let classes = document.body.className.split(' ');\n    var cmid = 0;\n    var questionid = 0;\n    var syncInterval = interval ? interval * 1000 : 10000; // Default: Sync Every 10s.\n\n    const postOne = async (methodname, args) => {\n        try {\n            const response = await call([{\n                methodname,\n                args,\n            }])[0];\n            return response;\n        } catch (error) {\n            console.error('Error in postOne:', error);\n            throw error;\n        }\n    };\n\n    if (document.getElementById('page-mod-assign-editsubmission')) {\n        if (assignSubmit) {\n            assignSubmit.addEventListener('click', async function (e) {\n                // if(assignSubmit.getAttribute('disabled') == 'true') return;\n                e.preventDefault();\n                // assignSubmit.disabled = true;\n                if (filename) {\n                    await SyncData().then((res) => {\n                        assignSubmit.removeEventListener('click', arguments.callee);\n                        assignSubmit.click();\n                        assignSubmit.removeEventListener('click', arguments.callee);\n                    })\n                } else {\n                    assignSubmit.removeEventListener('click', arguments.callee);\n                    assignSubmit.click();\n                    assignSubmit.removeEventListener('click', arguments.callee);\n                }\n            });\n        }\n    }\n\n    if (document.getElementById('page-mod-quiz-attempt')) {\n        if (quizSubmit) {\n            quizSubmit.addEventListener('click', async (e) => {\n                if (filename) {\n                    await SyncData().then(res => {\n                        document.querySelector('#responseform').submit();\n                    });\n                }\n\n            });\n        }\n    }\n\n    const getModal = (e) => {\n        return create({\n            type: 'SAVE_CANCEL',\n            title: getString('tiny_cursive', 'tiny_cursive'),\n            body: '<textarea  class=\"form-control inputUrl\" value=\"\" id=\"inputUrl\" placeholder=\"sourceurl\"></textarea>',\n\n            removeOnClose: true,\n        })\n            .done(modal => {\n                modal.getRoot().append('<style>.close{ display: none ! important; }</style>');\n                modal.show();\n                var lastEvent = '';\n                modal.getRoot().on(save, function () {\n                    var number = document.getElementById(\"inputUrl\").value;\n                    if (number === \"\" || number === null || number === undefined) {\n                        editor.execCommand('Undo');\n                        alert(\"You cannot paste text without providing source\");\n                    } else {\n                        editor.execCommand('Paste');\n                    }\n                    let ur = e.srcElement.baseURI;\n                    let recourceId = 0;\n                    let parm = new URL(ur);\n                    let modulename = \"\";\n                    let editorid = editor?.id;\n                    let classes = document.body.className.split(' ');\n                    let courseid = parseInt(classes.find((classname) => { return classname.startsWith('course-') }).split('-')[1]); // Getting cmid from body classlist.\n                    let cmid = parseInt(classes.find((classname) => { return classname.startsWith('cmid-') }).split('-')[1]); // Getting cmid from body classlist.\n\n\n                    if (ur.includes(\"attempt.php\") || ur.includes(\"forum\") || ur.includes(\"assign\")) { } else {\n                        return false;\n                    }\n\n                    if (!ur.includes(\"forum\") && !ur.includes(\"assign\")) {\n                        recourceId = parm.searchParams.get('attempt');\n                    }\n\n                    if (recourceId === null) {\n                        recourceId = 0;\n                    }\n                    if (ur.includes(\"forum\")) {\n                        modulename = \"forum\";\n                    }\n                    if (ur.includes(\"assign\")) {\n                        modulename = \"assign\";\n                    }\n                    if (ur.includes(\"attempt\")) {\n                        modulename = \"quiz\";\n                    }\n                    if (cmid === null) { cmid = 0; }\n\n                    postOne('cursive_user_comments', {\n                        modulename: modulename,\n                        cmid: cmid,\n                        resourceid: recourceId,\n                        courseid: courseid,\n                        usercomment: number,\n                        timemodified: \"1121232\",\n                        editorid: editorid ? editorid : \"\"\n                    });\n                    lastEvent = 'save';\n                    modal.destroy();\n                });\n                modal.getRoot().on(cancel, function () {\n\n                    editor.execCommand('Undo');\n                    lastEvent = 'cancel';\n                });\n                modal.getRoot().on(hidden, function () {\n                    if (lastEvent != 'cancel' && lastEvent != 'save') { editor.execCommand('Undo'); }\n                });\n                return modal;\n            });\n    };\n    const sendKeyEvent = (event, ed) => {\n        let ur = ed.srcElement.baseURI;\n        let parm = new URL(ur);\n        ed = ed;\n        event = event;\n        let bodyid = document.querySelector('body').id;\n\n        if (bodyid == 'page-mod-quiz-attempt' || bodyid == 'page-mod-quiz-summary' || bodyid == 'page-mod-assign-editsubmission' || bodyid == 'page-mod-forum-view' || bodyid == 'page-mod-forum-post') {\n            cmid = parseInt(classes.find((classname) => { return classname.startsWith('cmid-') }).split('-')[1]); // Getting cmid from body classlist.\n        }\n\n        if (ur.includes(\"attempt.php\") || ur.includes(\"forum\") || ur.includes(\"assign\")) { } else {\n            return false;\n        }\n        if (ur.includes(\"forum\") || ur.includes(\"assign\")) {\n\n        } else {\n\n            recourceId = parm.searchParams.get('attempt');\n        }\n        if (recourceId === null) {\n\n            recourceId = 0;\n        }\n\n        if (ur.includes(\"forum\")) {\n            modulename = \"forum\";\n        }\n        if (ur.includes(\"assign\")) {\n            modulename = \"assign\";\n        }\n        if (ur.includes(\"attempt\")) {\n            modulename = \"quiz\";\n        }\n\n        filename = `${userid}_${recourceId}_${cmid}_${modulename}_attempt`;\n\n        if (modulename === 'quiz') {\n            questionid = editorid.split(':')[1].split('_')[0];\n            filename = `${userid}_${recourceId}_${cmid}_${questionid}_${modulename}_attempt`;\n        }\n\n        if (localStorage.getItem(filename)) {\n\n            let data = JSON.parse(localStorage.getItem(filename));\n            data.push({\n                resourceId: recourceId,\n                key: ed.key,\n                keyCode: ed.keyCode,\n                event: event,\n                courseId: courseid,\n                unixTimestamp: Date.now(),\n                clientId: host,\n                personId: userid\n            });\n            localStorage.setItem(filename, JSON.stringify(data));\n        } else {\n            let data = [];\n            data.push({\n                resourceId: recourceId,\n                key: ed.key,\n                keyCode: ed.keyCode,\n                event: event,\n                courseId: courseid,\n                unixTimestamp: Date.now(),\n                clientId: host,\n                personId: userid\n            });\n            localStorage.setItem(filename, JSON.stringify(data));\n        }\n    };\n    editor.on('keyUp', (editor) => {\n        sendKeyEvent(\"keyUp\", editor);\n    });\n    editor.on('Paste', async (e) => {\n        if (is_student && intervention) {\n            getModal(e);\n        }\n    });\n    editor.on('Redo', async (e) => {\n        if (is_student && intervention) {\n            getModal(e);\n        }\n    });\n    editor.on('keyDown', (editor) => {\n        sendKeyEvent(\"keyDown\", editor);\n    });\n    editor.on('init', () => {\n        let userdata = user.getUserId();\n        userid = userdata.userid;\n        host = userdata.host;\n        courseid = userdata.courseid;\n    });\n\n    async function SyncData() {\n\n        let data = localStorage.getItem(filename);\n\n        if (!data || data.length === 0) {\n            return;\n        } else {\n            localStorage.removeItem(filename);\n            try {\n                return await postOne('cursive_write_local_to_json', {\n                    key: ed.key,\n                    event: event,\n                    keyCode: ed.keyCode,\n                    resourceId: recourceId,\n                    cmid: cmid,\n                    modulename: modulename,\n                    editorid: editorid,\n                    json_data: data,\n                });\n            } catch (error) {\n                console.error('Error submitting data:', error);\n            }\n        }\n    }\n\n    window.addEventListener('unload', (e) => {\n        SyncData();\n    });\n\n    setInterval(SyncData, syncInterval);\n};\n"],"names":["editor","interval","is_student","intervention","quizSubmit","assignSubmit","document","querySelector","bodyElement","classList","contains","console","error","userid","host","courseid","filename","recourceId","modulename","editorid","id","classes","body","className","split","cmid","questionid","syncInterval","postOne","async","methodname","args","getElementById","addEventListener","e","preventDefault","SyncData","then","res","removeEventListener","arguments","callee","click","submit","getModal","type","title","removeOnClose","done","modal","getRoot","append","show","lastEvent","on","save","number","value","execCommand","alert","ur","srcElement","baseURI","parm","URL","parseInt","find","classname","startsWith","includes","searchParams","get","resourceid","usercomment","timemodified","destroy","cancel","hidden","sendKeyEvent","event","ed","bodyid","localStorage","getItem","data","JSON","parse","push","resourceId","key","keyCode","courseId","unixTimestamp","Date","now","clientId","personId","setItem","stringify","length","removeItem","json_data","userdata","user","getUserId","window","setInterval"],"mappings":"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"}