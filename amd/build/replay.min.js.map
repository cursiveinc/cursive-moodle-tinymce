{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport {call as fetchJson} from 'core/ajax';\nimport templates from 'core/templates';\nimport $ from 'jquery';\nexport default class Replay {\n    controllerId = '';\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        this.controllerId = controllerId;\n        this.replayInProgress = false;\n        this.speed = speed;\n        this.loop = loop;\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n        if (controllerId) {\n\n            this.constructController(controllerId);\n        }\n        this.loadJSON(filePath)\n        .then((data) => {\n            if (data.status) {\n                var val = JSON.parse(data.data);\n                this.logData = val;\n                if (\"data\" in this.logData) {\n                    this.logData = this.logData.data;\n                }\n                if (\"payload\" in this.logData) {\n                    this.logData = this.logData.payload;\n                }\n                this.startReplay();\n            } else {\n                // eslint-disable-next-line\n                templates.render('tiny_cursive/no_submission').then(html => {\n                    let updatedHtml = html.replace('No Submission', \"Something Went Wrong! or File Not Found!\");\n                    $('.tiny_cursive').html(updatedHtml);\n                });\n            }\n            return true;\n        })\n        .catch(error => {\n            // eslint-disable-next-line\n            templates.render('tiny_cursive/no_submission').then(html => {\n                let updatedHtml = html.replace('No Submission', \"Something Went Wrong! or File Not Found!\");\n                $('.tiny_cursive').html(updatedHtml);\n            });\n            window.console.error('Error loading JSON file: ' + error.message);\n        });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n        }\n    }\n    constructController(controllerId) {\n        const controller = document.getElementById(controllerId);\n\n        if (controller) {\n            this.scrubberElement = document.createElement('input');\n            this.scrubberElement.type = 'range';\n            this.scrubberElement.id = 'timelineScrubber';\n            this.scrubberElement.min = '0';\n            this.scrubberElement.max = '100';\n            this.scrubberElement.addEventListener('input', () => {\n                const scrubberValue = this.scrubberElement.value;\n                this.skipToTime(scrubberValue);\n            });\n            controller.appendChild(this.scrubberElement);\n        }\n    }\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response => {\n            return response;\n        }).fail(error => {\n            throw new Error('Error loading JSON file: ' + error.message);\n        });\n    }\n\n    // Call this to make a \"start\" or \"start over\" function\n    startReplay() {\n        // Clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        this.replayInProgress = true;\n        let uid = this.controllerId.split('_')[1];\n        let element = document.getElementById('rep' + uid);\n        let isactive = element.classList.contains('active');\n        if (!isactive) {\n            this.stopReplay();\n        } else {\n            this.outputElement.innerHTML = '';\n        }\n        this.replayLog();\n    }\n\n    // Called by startReplay() to recursively call through keydown events\n    replayLog() {\n        let textOutput = \"\";\n        let index = 0;\n        const processEvent = () => {\n\n            if (this.replayInProgress) {\n                if (index < this.logData.length) {\n                    let event = this.logData[index++];\n                    if (event.event.toLowerCase() === 'keydown') {\n                        textOutput = this.applyKey(event.key, textOutput);\n                    }\n                    this.outputElement.innerHTML = textOutput;\n                    this.setScrubberVal(index / this.logData.length * 100);\n                    this.replayTimeout = setTimeout(processEvent, 1 / this.speed * 100);\n                } else {\n                    this.replayInProgress = false;\n                    if (this.loop) {\n                        this.startReplay();\n                    }\n                }\n            }\n        };\n        processEvent();\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        // Only go through certain % of log data\n        let textOutput = \"\";\n        const numElementsToProcess = Math.ceil(this.logData.length * percentage / 100);\n        for (let i = 0; i < numElementsToProcess; i++) {\n            const event = this.logData[i];\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        }\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(percentage);\n    }\n\n    // Used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key, textOutput) {\n        switch (key) {\n            case \"Enter\":\n                return textOutput + \"\\n\";\n            case \"Backspace\":\n                return textOutput.slice(0, -1);\n            case \"ControlBackspace\": {\n                let lastSpace = textOutput.lastIndexOf(' ');\n                return textOutput.slice(0, lastSpace);\n            }\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\", \"ArrowLeft\", \"Meta\"]\n                    .includes(key) ? textOutput + key : textOutput;\n        }\n    }\n}\n"],"names":["constructor","elementId","filePath","speed","loop","controllerId","replayInProgress","element","document","getElementById","Error","outputElement","constructController","loadJSON","then","data","status","val","JSON","parse","logData","this","payload","startReplay","render","html","updatedHtml","replace","catch","error","window","console","message","stopReplay","clearTimeout","replayTimeout","controller","scrubberElement","createElement","type","id","min","max","addEventListener","scrubberValue","value","skipToTime","appendChild","setScrubberVal","String","methodname","args","filepath","done","response","fail","uid","split","classList","contains","innerHTML","replayLog","textOutput","index","processEvent","length","event","toLowerCase","applyKey","key","setTimeout","skipToEnd","forEach","slice","percentage","numElementsToProcess","Math","ceil","i","lastSpace","lastIndexOf","includes"],"mappings":"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"}